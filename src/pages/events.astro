---
// src/pages/events.astro
// Main events listing page with filtering, sorting, and pagination
// Shows all events in a grid layout with client-side filtering for speed

// Import the main Layout component for consistent site structure
import Layout from '../layouts/Layout.astro';
// Import the reusable EventCard component
import EventCard from '../layouts/EventCard.astro';
// Import the function to fetch events from Airtable
import { getEvents } from '../lib/getEvents.ts';

// Fetch ALL events from Airtable - we'll handle filtering client-side for speed
// Sort by creation date (newest first) as the default
const allEvents = await getEvents({
  sortField: 'Created',
  sortDirection: 'desc',
  // Don't set maxRecords - we want all events for client-side filtering
});

// Extract unique categories from all events for the filter dropdown
// This ensures the filter only shows categories that actually exist in your data
const uniqueCategories = [...new Set(allEvents.map(event => event.category).filter(Boolean))];

// Serialize events data for JavaScript (this is the key fix)
// We need to safely pass the server data to the client-side script
const eventsDataForJS = JSON.stringify(allEvents);
---

<!-- Use the main Layout component with a descriptive title -->
<Layout title="All Events - More Rain">
  
  <!-- Main container using the same centered layout as your other pages -->
  <div class="page-container">
    
    <!-- Page header -->
    <section class="page-header">
      <h1 class="page-title">All Events</h1>
      <p class="page-description">
        Browse all documented climate events. Use the filters below to find specific types of events or time periods.
      </p>
    </section>
    
    <!-- Filter and sort controls -->
    <section class="filter-section">
      <div class="filter-controls">
        
        <!-- Search input (new feature) -->
        <div class="filter-group">
          <label for="search-input" class="filter-label">Search:</label>
          <input 
            type="text" 
            id="search-input" 
            class="filter-input" 
            placeholder="Search events..."
            autocomplete="off"
          />
        </div>
        
        <!-- Sort dropdown -->
        <div class="filter-group">
          <label for="sort-select" class="filter-label">Sort by:</label>
          <select id="sort-select" class="filter-select">
            <option value="newest">Newest First</option>
            <option value="oldest">Oldest First</option>
            <option value="a-z">A-Z</option>
            <option value="z-a">Z-A</option>
          </select>
        </div>
        
        <!-- Category filter -->
        <div class="filter-group">
          <label for="category-select" class="filter-label">Category:</label>
          <select id="category-select" class="filter-select">
            <option value="">All Categories</option>
            {/* Generate options for each unique category */}
            {uniqueCategories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>
        
        <!-- Clear filters button -->
        <button id="clear-filters" class="clear-button">Clear Filters</button>
        
      </div>
      
      <!-- Results counter -->
      <div class="results-info">
        <span id="results-count">Showing {allEvents.length} events</span>
      </div>
    </section>
    
    <!-- Events grid container -->
<section class="events-section">
  <div id="events-grid" class="events-grid">
    {/* Render all events server-side with data attributes for filtering */}
    {allEvents.map(event => (
      <div 
        class="event-wrapper"
        data-category={event.category || ''}
        data-title={event.title || ''}
        data-summary={event.summary || ''}
        data-location={event.location || ''}
        data-quote={event.quote || ''}
        data-start-date={event.startDate || ''}
        data-search-text={`${event.title || ''} ${event.summary || ''} ${event.location || ''} ${event.category || ''} ${event.quote || ''}`.toLowerCase()}
      >
        <EventCard event={event} showFullSummary={false} />
      </div>
    ))}
  </div>
      
      <!-- Loading message (shown during filtering) -->
      <div id="loading-message" class="loading-message" style="display: none;">
        <p>Filtering events...</p>
      </div>
      
      <!-- No results message (shown when no events match filters) -->
      <div id="no-results" class="no-results" style="display: none;">
        <p>No events match your current filters.</p>
        <button id="reset-filters" class="reset-button">Reset Filters</button>
      </div>
    </section>
    
    <!-- Pagination controls -->
    <section class="pagination-section">
      <div id="pagination-info" class="pagination-info">
        <span id="page-info">Page 1 of 1</span>
      </div>
      
      <div id="pagination-controls" class="pagination-controls">
        <button id="prev-page" class="pagination-button" disabled>← Previous</button>
        <div id="page-numbers" class="page-numbers">
          <!-- Page numbers will be generated by JavaScript -->
        </div>
        <button id="next-page" class="pagination-button" disabled>Next →</button>
      </div>
    </section>
    
  </div>

  <!-- FIXED: Hidden script tag to pass data to JavaScript -->
  <!-- This is the proper way to pass server-side data to client-side JS in Astro -->
  <script type="application/json" id="events-data" set:html={eventsDataForJS}></script>
</Layout>

<style>
  /* Main page container using the same pattern as your other pages */
  .page-container {
    max-width: 1200px; /* Wider than EventLayout to accommodate filters and grid */
    margin: 0 auto; /* Centers the container horizontally */
    padding: 0 1rem 2rem; /* Top: 0, sides: 1rem, bottom: 2rem */
    color: var(--white); /* White text using your color variable */
  }

/* Event wrapper styling for JavaScript filtering */
.event-wrapper {
  /* No additional styling needed - the EventCard handles all the styling */
}

/* Hide event wrappers by default until JavaScript loads */
.event-wrapper {
  display: block;
}

  /* Page header styling */
  .page-header {
    margin-bottom: 2rem; /* Space below header */
    text-align: center; /* Center-align the header content */
  }
  
  /* Main page title */
  .page-title {
    font-size: 2.5rem; /* Large, prominent title */
    font-weight: 700; /* Bold */
    color: var(--white); /* White text */
    margin-bottom: 1rem; /* Space below title */
    line-height: 1.2; /* Tight line height */
  }
  
  /* Page description text */
  .page-description {
    font-size: 1.1rem; /* Slightly larger than body text */
    line-height: 1.6; /* Good readability */
    color: var(--platinum); /* Light gray for less prominence than title */
    max-width: 600px; /* Limit line length for better readability */
    margin: 0 auto; /* Center the description */
  }
  
  /* Filter section styling */
  .filter-section {
    margin-bottom: 2rem; /* Space below filters */
    padding: 1.5rem; /* Internal padding */
    background-color: rgba(var(--whitergb), 0.05); /* Subtle background */
    border-radius: 8px; /* Rounded corners */
    border: 1px solid rgba(var(--whitergb), 0.1); /* Subtle border */
  }
  
  /* Filter controls container */
  .filter-controls {
    display: flex;
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    gap: 1.5rem; /* Space between filter groups */
    align-items: flex-end; /* Align items to bottom for consistent button alignment */
    margin-bottom: 1rem; /* Space below controls */
  }
  
  /* Individual filter group styling */
  .filter-group {
    display: flex;
    flex-direction: column; /* Stack label above input/select */
    min-width: 150px; /* Minimum width for consistency */
  }
  
  /* Filter labels */
  .filter-label {
    font-size: 0.9rem; /* Smaller than body text */
    font-weight: 500; /* Medium weight */
    color: var(--platinum); /* Light gray */
    margin-bottom: 0.5rem; /* Space below label */
  }
  
  /* Filter select dropdowns - FIXED STYLING */
  .filter-select {
    padding: 0.5rem 0.75rem; /* Generous padding */
    background-color: var(--blue); /* Dark blue background for contrast */
    border: 1px solid rgba(var(--whitergb), 0.3); /* More visible border */
    border-radius: 4px; /* Rounded corners */
    color: var(--white); /* White text for readability */
    font-size: 0.9rem; /* Consistent font size */
    cursor: pointer; /* Pointer cursor */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  /* Fix for dropdown options - ensure they're readable */
  .filter-select option {
    background-color: var(--blue); /* Dark background for options */
    color: var(--white); /* White text for options */
    padding: 0.5rem; /* Padding for options */
  }
  
  /* Search input styling (new) */
  .filter-input {
    padding: 0.5rem 0.75rem; /* Same padding as selects */
    background-color: var(--blue); /* Dark blue background */
    border: 1px solid rgba(var(--whitergb), 0.3); /* Visible border */
    border-radius: 4px; /* Rounded corners */
    color: var(--white); /* White text */
    font-size: 0.9rem; /* Consistent font size */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  /* Search input placeholder styling */
  .filter-input::placeholder {
    color: var(--platinum); /* Light gray placeholder */
    opacity: 0.7; /* Slightly transparent */
  }
  
  /* Focus states for inputs and selects */
  .filter-select:focus,
  .filter-select:hover,
  .filter-input:focus,
  .filter-input:hover {
    border-color: var(--orange); /* Orange border on focus */
    outline: none; /* Remove default outline */
    background-color: rgba(var(--whitergb), 0.1); /* Slightly lighter background */
  }
  
  /* Clear filters button */
  .clear-button {
    padding: 0.5rem 1rem; /* Generous padding */
    background-color: transparent; /* Transparent background */
    border: 1px solid rgba(var(--whitergb), 0.3); /* Subtle border */
    border-radius: 4px; /* Rounded corners */
    color: var(--platinum); /* Light gray text */
    font-size: 0.9rem; /* Consistent font size */
    cursor: pointer; /* Pointer cursor */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  /* Clear button hover state */
  .clear-button:hover {
    background-color: rgba(var(--whitergb), 0.1); /* Subtle background */
    border-color: var(--white); /* White border */
    color: var(--white); /* White text */
  }
  
  /* Results info styling */
  .results-info {
    text-align: center; /* Center the results counter */
    color: var(--platinum); /* Light gray */
    font-size: 0.9rem; /* Smaller text */
  }
  
  /* Events section */
  .events-section {
    margin-bottom: 2rem; /* Space below events */
    min-height: 400px; /* Minimum height to prevent layout jumping */
  }
  
  /* Events grid layout - same as your home page */
  .events-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Responsive grid */
    gap: 2rem; /* Space between cards */
    margin-bottom: 2rem; /* Space below grid */
  }
  
  /* Loading message styling */
  .loading-message {
    text-align: center;
    padding: 2rem;
    color: var(--platinum); /* Light gray */
    font-style: italic;
  }
  
  /* No results message styling */
  .no-results {
    text-align: center;
    padding: 2rem;
    background-color: rgba(var(--whitergb), 0.05); /* Subtle background */
    border-radius: 8px;
    border: 1px solid rgba(var(--whitergb), 0.1); /* Subtle border */
  }
  
  /* Reset filters button */
  .reset-button {
    margin-top: 1rem; /* Space above button */
    padding: 0.75rem 1.5rem; /* Generous padding */
    background-color: var(--orange); /* Orange background */
    border: none; /* No border */
    border-radius: 4px; /* Rounded corners */
    color: var(--blue); /* Blue text for contrast */
    font-weight: 500; /* Medium weight */
    cursor: pointer; /* Pointer cursor */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  /* Reset button hover state */
  .reset-button:hover {
    background-color: var(--white); /* White background */
    transform: translateY(-1px); /* Slight lift effect */
  }
  
  /* Pagination section */
  .pagination-section {
    display: flex;
    justify-content: space-between; /* Space between info and controls */
    align-items: center; /* Center vertically */
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    gap: 1rem; /* Space between elements */
    padding: 1rem 0; /* Vertical padding */
    border-top: 1px solid rgba(var(--whitergb), 0.2); /* Subtle top border */
  }
  
  /* Pagination info styling */
  .pagination-info {
    color: var(--platinum); /* Light gray */
    font-size: 0.9rem; /* Smaller text */
  }
  
  /* Pagination controls container */
  .pagination-controls {
    display: flex;
    align-items: center; /* Center vertically */
    gap: 0.5rem; /* Space between elements */
  }
  
  /* Pagination buttons */
  .pagination-button {
    padding: 0.5rem 1rem; /* Generous padding */
    background-color: rgba(var(--whitergb), 0.1); /* Subtle background */
    border: 1px solid rgba(var(--whitergb), 0.2); /* Subtle border */
    border-radius: 4px; /* Rounded corners */
    color: var(--white); /* White text */
    font-size: 0.9rem; /* Consistent font size */
    cursor: pointer; /* Pointer cursor */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  /* Pagination button hover state */
  .pagination-button:hover:not(:disabled) {
    background-color: var(--orange); /* Orange background */
    border-color: var(--orange); /* Orange border */
    color: var(--blue); /* Blue text for contrast */
  }
  
  /* Disabled pagination button */
  .pagination-button:disabled {
    opacity: 0.5; /* Reduced opacity */
    cursor: not-allowed; /* Not-allowed cursor */
  }
  
  /* Page numbers container */
  .page-numbers {
    display: flex;
    gap: 0.25rem; /* Small space between page numbers */
  }
  
  /* Individual page number buttons */
  .page-number {
    padding: 0.5rem 0.75rem; /* Generous padding */
    background-color: rgba(var(--whitergb), 0.1); /* Subtle background */
    border: 1px solid rgba(var(--whitergb), 0.2); /* Subtle border */
    border-radius: 4px; /* Rounded corners */
    color: var(--white); /* White text */
    font-size: 0.9rem; /* Consistent font size */
    cursor: pointer; /* Pointer cursor */
    transition: all 0.2s ease; /* Smooth transitions */
    text-decoration: none; /* Remove link underline */
    display: inline-block; /* Inline block for consistent sizing */
  }
  
  /* Page number hover state */
  .page-number:hover {
    background-color: rgba(var(--whitergb), 0.2); /* Lighter background */
    border-color: var(--white); /* White border */
  }
  
  /* Active page number */
  .page-number.active {
    background-color: var(--orange); /* Orange background */
    border-color: var(--orange); /* Orange border */
    color: var(--blue); /* Blue text for contrast */
  }
  
  /* Additional styles for the custom event cards created by JavaScript */
  .event-card {
    background-color: rgba(var(--whitergb), 0.05); /* Subtle background */
    border: 1px solid rgba(var(--whitergb), 0.1); /* Subtle border */
    border-radius: 8px; /* Rounded corners */
    overflow: hidden; /* Ensure images fit properly */
    transition: all 0.2s ease; /* Smooth transitions */
  }
  
  .event-card:hover {
    transform: translateY(-2px); /* Slight lift effect */
    border-color: var(--orange); /* Orange border on hover */
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3); /* Subtle shadow */
  }
  
  .card-link {
    display: block; /* Full card is clickable */
    text-decoration: none; /* Remove link underline */
    color: inherit; /* Inherit text color */
  }
  
  .card-image {
    width: 100%; /* Full width */
    height: 200px; /* Fixed height for consistency */
    overflow: hidden; /* Crop images if needed */
  }
  
  .card-image img {
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    object-fit: cover; /* Crop to fit */
  }
  
  .card-content {
    padding: 1.5rem; /* Generous padding */
  }
  
  .card-title {
    font-size: 1.25rem; /* Larger title */
    font-weight: 600; /* Semi-bold */
    color: var(--white); /* White text */
    margin-bottom: 0.75rem; /* Space below title */
    line-height: 1.3; /* Good line height */
  }
  
  .card-meta {
    display: flex;
    flex-direction: column; /* Stack meta items vertically */
    gap: 0.5rem; /* Space between meta items */
    margin-bottom: 1rem; /* Space below meta */
    font-size: 0.9rem; /* Smaller text */
    color: var(--platinum); /* Light gray */
  }
  
  .card-quote {
    font-style: italic; /* Italic text */
    color: var(--orange); /* Orange color for quotes */
    margin-bottom: 1rem; /* Space below quote */
    padding-left: 1rem; /* Indent quote */
    border-left: 2px solid var(--orange); /* Orange left border */
  }
  
  .card-summary {
    color: var(--platinum); /* Light gray */
    line-height: 1.5; /* Good readability */
    margin-bottom: 0; /* No bottom margin */
  }
  
  /* Responsive design for smaller screens */
  @media (max-width: 768px) {
    .page-container {
      max-width: 100%; /* Full width on mobile */
    }
    
    .page-title {
      font-size: 2rem; /* Smaller title on mobile */
    }
    
    .page-description {
      font-size: 1rem; /* Standard size on mobile */
    }
    
    .filter-controls {
      flex-direction: column; /* Stack filters vertically on mobile */
      align-items: stretch; /* Stretch to full width */
    }
    
    .filter-group {
      min-width: auto; /* Remove minimum width on mobile */
    }
    
    .events-grid {
      grid-template-columns: 1fr; /* Single column on mobile */
      gap: 1.5rem; /* Less gap on mobile */
    }
    
    .pagination-section {
      flex-direction: column; /* Stack pagination vertically on mobile */
      text-align: center; /* Center align */
    }
    
    .pagination-controls {
      flex-wrap: wrap; /* Allow wrapping on mobile */
      justify-content: center; /* Center the controls */
    }
  }
</style>

<script>
  // Client-side JavaScript for filtering, sorting, and pagination
  // This runs after the page loads and provides interactive functionality
  
  // Get all events data from the hidden script tag
  const allEventsData = JSON.parse(document.getElementById('events-data').textContent);
  
  // Configuration for pagination
  const EVENTS_PER_PAGE = 12; // Number of events to show per page
  
  // Global state for filtering and pagination
  let currentPage = 1;
  let filteredEventElements = []; // Store filtered DOM elements
  let currentFilters = {
    sort: 'newest',
    category: '',
    search: ''
  };
  
  // Get all event wrapper elements
  const allEventWrappers = Array.from(document.querySelectorAll('.event-wrapper'));
  
  // Function to search events based on search term
  function matchesSearch(wrapper, searchTerm) {
    if (!searchTerm.trim()) return true;
    
    const searchText = wrapper.dataset.searchText || '';
    return searchText.includes(searchTerm.toLowerCase().trim());
  }
  
  // Function to match category filter
  function matchesCategory(wrapper, category) {
    if (!category) return true;
    return wrapper.dataset.category === category;
  }
  
  // Function to sort event wrapper elements
  function sortEventWrappers(wrappers, sortOption) {
    const sortedWrappers = [...wrappers];
    
    switch (sortOption) {
      case 'newest':
        return sortedWrappers.sort((a, b) => {
          const dateA = new Date(a.dataset.startDate || 0);
          const dateB = new Date(b.dataset.startDate || 0);
          return dateB - dateA;
        });
      case 'oldest':
        return sortedWrappers.sort((a, b) => {
          const dateA = new Date(a.dataset.startDate || 0);
          const dateB = new Date(b.dataset.startDate || 0);
          return dateA - dateB;
        });
      case 'a-z':
        return sortedWrappers.sort((a, b) => {
          const titleA = a.dataset.title || '';
          const titleB = b.dataset.title || '';
          return titleA.localeCompare(titleB);
        });
      case 'z-a':
        return sortedWrappers.sort((a, b) => {
          const titleA = a.dataset.title || '';
          const titleB = b.dataset.title || '';
          return titleB.localeCompare(titleA);
        });
      default:
        return sortedWrappers;
    }
  }
  
  // Function to filter and sort events
  function filterAndSortEvents() {
    // Filter events based on current filters
    let filtered = allEventWrappers.filter(wrapper => {
      return matchesSearch(wrapper, currentFilters.search) && 
             matchesCategory(wrapper, currentFilters.category);
    });
    
    // Sort the filtered events
    filtered = sortEventWrappers(filtered, currentFilters.sort);
    
    return filtered;
  }
  
  // Function to update the events display
  function updateEventsDisplay() {
    // Show loading message briefly
    document.getElementById('loading-message').style.display = 'block';
    document.getElementById('events-grid').style.display = 'none';
    document.getElementById('no-results').style.display = 'none';
    
    // Use setTimeout to prevent blocking the UI
    setTimeout(() => {
      // Filter and sort events
      filteredEventElements = filterAndSortEvents();
      
      // Update results counter
      const resultsCount = document.getElementById('results-count');
      const searchTerm = currentFilters.search;
      const categoryFilter = currentFilters.category;
      
      let statusText = `Showing ${filteredEventElements.length} events`;
      if (searchTerm || categoryFilter) {
        statusText += ' (filtered)';
      }
      resultsCount.textContent = statusText;
      
      // Check if we have any results
      if (filteredEventElements.length === 0) {
        document.getElementById('loading-message').style.display = 'none';
        document.getElementById('events-grid').style.display = 'grid';
        document.getElementById('no-results').style.display = 'block';
        
        // Hide all event wrappers
        allEventWrappers.forEach(wrapper => {
          wrapper.style.display = 'none';
        });
        
        updatePagination();
        return;
      }
      
      // Reset to first page when filters change
      currentPage = 1;
      
      // Update the display
      displayCurrentPage();
      updatePagination();
      
      // Hide loading message and show results
      document.getElementById('loading-message').style.display = 'none';
      document.getElementById('events-grid').style.display = 'grid';
      document.getElementById('no-results').style.display = 'none';
    }, 50); // Short delay to show loading state
  }
  
  // Function to display events for the current page
  function displayCurrentPage() {
    const startIndex = (currentPage - 1) * EVENTS_PER_PAGE;
    const endIndex = startIndex + EVENTS_PER_PAGE;
    const pageEvents = filteredEventElements.slice(startIndex, endIndex);
    
    // Hide all event wrappers first
    allEventWrappers.forEach(wrapper => {
      wrapper.style.display = 'none';
    });
    
    // Show only the events for this page
    pageEvents.forEach(wrapper => {
      wrapper.style.display = 'block';
    });
    
    // Scroll to top of events section smoothly
    document.querySelector('.events-section').scrollIntoView({ 
      behavior: 'smooth', 
      block: 'start' 
    });
  }
  
  // Function to update pagination controls
  function updatePagination() {
    const totalPages = Math.ceil(filteredEventElements.length / EVENTS_PER_PAGE);
    
    // Update page info
    document.getElementById('page-info').textContent = filteredEventElements.length > 0 ? `Page ${currentPage} of ${totalPages}` : 'Page 0 of 0';
    
    // Update previous/next buttons
    const prevButton = document.getElementById('prev-page');
    const nextButton = document.getElementById('next-page');
    
    prevButton.disabled = currentPage <= 1;
    nextButton.disabled = currentPage >= totalPages;
    
    // Generate page number buttons
    const pageNumbers = document.getElementById('page-numbers');
    pageNumbers.innerHTML = '';
    
    // Show page numbers (limit to 5 for mobile friendliness)
    const maxPageNumbers = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxPageNumbers / 2));
    let endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);
    
    // Adjust start page if we're near the end
    if (endPage - startPage + 1 < maxPageNumbers) {
      startPage = Math.max(1, endPage - maxPageNumbers + 1);
    }
    
    // Add page number buttons
    for (let i = startPage; i <= endPage; i++) {
      const pageButton = document.createElement('button');
      pageButton.textContent = i;
      pageButton.className = `page-number ${i === currentPage ? 'active' : ''}`;
      pageButton.addEventListener('click', () => {
        currentPage = i;
        displayCurrentPage();
        updatePagination();
      });
      pageNumbers.appendChild(pageButton);
    }
    
    // Hide pagination if only one page
    const paginationSection = document.querySelector('.pagination-section');
    paginationSection.style.display = totalPages <= 1 ? 'none' : 'flex';
  }
  
  // Function to clear all filters
  function clearFilters() {
    currentFilters = {
      sort: 'newest',
      category: '',
      search: ''
    };
    
    // Reset form elements
    document.getElementById('sort-select').value = 'newest';
    document.getElementById('category-select').value = '';
    document.getElementById('search-input').value = '';
    
    // Update display
    updateEventsDisplay();
  }
  
  // Initialize event handlers when the page loads
  document.addEventListener('DOMContentLoaded', function() {
    
    // Sort dropdown handler
    document.getElementById('sort-select').addEventListener('change', function(e) {
      currentFilters.sort = e.target.value;
      updateEventsDisplay();
    });
    
    // Category dropdown handler
    document.getElementById('category-select').addEventListener('change', function(e) {
      currentFilters.category = e.target.value;
      updateEventsDisplay();
    });
    
    // Search input handler with debouncing for performance
    let searchTimeout;
    document.getElementById('search-input').addEventListener('input', function(e) {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        currentFilters.search = e.target.value;
        updateEventsDisplay();
      }, 300); // 300ms delay for better performance
    });
    
    // Clear filters button handler
    document.getElementById('clear-filters').addEventListener('click', clearFilters);
    
    // Reset filters button handler (in no-results section)
    document.getElementById('reset-filters').addEventListener('click', clearFilters);
    
    // Pagination button handlers
    document.getElementById('prev-page').addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        displayCurrentPage();
        updatePagination();
      }
    });
    
    document.getElementById('next-page').addEventListener('click', function() {
      const totalPages = Math.ceil(filteredEventElements.length / EVENTS_PER_PAGE);
      if (currentPage < totalPages) {
        currentPage++;
        displayCurrentPage();
        updatePagination();
      }
    });
    
    // Initialize the page with all events
    updateEventsDisplay();
  });
</script>
