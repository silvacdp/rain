---
import Layout from '../layouts/Layout.astro';
import EventCard from '../layouts/EventCard.astro';

import { getEvents } from '../lib/getEvents.ts';

const events = await getEvents({
  sortDirection: 'desc',
  // Fetch all events, no server-side filters to enable full client filtering
});
---

<!-- Layout + page content -->
<Layout title="All Events">
  <main class="page-container">
    <h2 class="page-title">More Rain - All Events</h2>

    <!-- Filter/Search Form -->
    <form class="event-filter-form">
      <input 
        type="text" 
        id="search" 
        name="search" 
        placeholder="Search events..." 
        aria-label="Search"
      />

      <select id="category" name="category">
        <option value="">All Categories</option>
        <option value="Rain/Flood">Rain/Flood</option>
        <option value="Heatwave">Heatwave</option>
        <option value="Wildfire">Wildfire</option>
        <option value="Other">Other</option>
      </select>

      <select id="sort" name="sort">
        <option value="desc">Newest First</option>
        <option value="asc">Oldest First</option>
      </select>
    </form>

    <!-- Events Grid -->
    <section id="eventsGrid" class="event-grid">
      {events.map(event => (
        <EventCard event={event} showFullSummary={false} />
      ))}
    </section>

    <!-- No results message (hidden by default) -->
    <div id="noResults" class="no-results" style="display: none;">
      <p>No events found matching your search criteria.</p>
      <p>Try adjusting your search terms or category filter.</p>
    </div>
  </main>
</Layout>

<script>
// Get all events from server-side - fix the JSON parsing
const allEvents = JSON.parse(document.getElementById('eventsData').textContent);

// Cache references to form controls and events container
const searchInput = document.getElementById('search');
const categorySelect = document.getElementById('category');
const sortSelect = document.getElementById('sort');
const eventsGrid = document.getElementById('eventsGrid');
const noResults = document.getElementById('noResults');

// Listen for input and change on form elements to filter & sort dynamically
searchInput.addEventListener('input', updateEvents);
categorySelect.addEventListener('change', updateEvents);
sortSelect.addEventListener('change', updateEvents);

// Prevent form submit from reloading page
document.querySelector('.event-filter-form').addEventListener('submit', e => e.preventDefault());

// Function to create a slug from title (matches your EventCard logic)
function createSlug(title) {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')  // Replace non-alphanumeric with hyphens
    .replace(/^-+|-+$/g, '');     // Remove leading/trailing hyphens
}

// Function to get category icon (matches your EventCard logic)
function getCategoryIcon(category) {
  switch (category) {
    case 'Rain/Flood':
      return 'üåßÔ∏è';
    case 'Heatwave':
      return 'üå°Ô∏è';
    case 'Wildfire':
      return 'üî•';
    case 'Other':
      return '‚ö†Ô∏è';
    default:
      return 'üåç';
  }
}

// Function to format date ranges (matches your EventCard logic)
function formatDateRange(startDate, endDate) {
  if (!startDate) return '';
  
  const start = new Date(startDate);
  const startOptions = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  
  if (!endDate) {
    return start.toLocaleDateString('en-US', startOptions);
  }
  
  const end = new Date(endDate);
  
  // If same month and year, show "July 7-10, 2025"
  if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
    return `${start.toLocaleDateString('en-US', { month: 'long' })} ${start.getDate()}-${end.getDate()}, ${start.getFullYear()}`;
  }
  
  // If different months, show "July 7 - August 3, 2025"
  if (start.getFullYear() === end.getFullYear()) {
    return `${start.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}, ${start.getFullYear()}`;
  }
  
  // If different years, show full dates
  return `${start.toLocaleDateString('en-US', startOptions)} - ${end.toLocaleDateString('en-US', startOptions)}`;
}

// Function to truncate text (matches your EventCard logic)
function truncateText(text, maxLength = 150) {
  if (!text || text.length <= maxLength) return text;
  return text.substring(0, maxLength).trim() + '...';
}

// Function to create EventCard HTML (replicates your EventCard component)
function createEventCardHTML(event) {
  const slug = createSlug(event.title);
  const formattedDate = formatDateRange(event.startDate, event.endDate);
  const displaySummary = event.summary ? truncateText(event.summary) : '';
  
  return `
    <article class="event-card">
      <a href="/events/${slug}" class="card-link">
        ${event.imageUrl ? `
          <div class="card-image">
            <img 
              src="${event.imageUrl}" 
              alt="${event.title}"
              loading="lazy"
            />
          </div>
        ` : ''}
        
        <div class="card-content">
          <h3 class="card-title">${event.title}</h3>
          
          <div class="card-meta">
            ${formattedDate ? `<span class="card-date">üìÖ ${formattedDate}</span>` : ''}
            ${event.location ? `<span class="card-location">üåç ${event.location}</span>` : ''}
            ${event.category ? `<span class="card-category">${getCategoryIcon(event.category)} ${event.category}</span>` : ''}
          </div>
          
          ${event.quote ? `
            <blockquote class="card-quote">
              "${event.quote}"
            </blockquote>
          ` : ''}
          
          ${displaySummary ? `
            <p class="card-summary">${displaySummary}</p>
          ` : ''}
        </div>
      </a>
    </article>
  `;
}

// Main function to update events based on filters
function updateEvents() {
  const searchTerm = searchInput.value.trim().toLowerCase();
  const category = categorySelect.value;
  const sortDirection = sortSelect.value;

  // Filter events by search and category
  let filtered = allEvents.filter(event => {
    // Create searchable text from multiple fields
    const searchable = (
      event.title + ' ' + 
      (event.summary || '') + ' ' + 
      (event.quote || '') + ' ' + 
      (event.location || '') + ' ' + 
      (event.category || '')
    ).toLowerCase();
    
    const matchesSearch = !searchTerm || searchable.includes(searchTerm);
    const matchesCategory = !category || event.category === category;
    
    return matchesSearch && matchesCategory;
  });

  // Sort filtered events by startDate
  filtered.sort((a, b) => {
    const dateA = new Date(a.startDate);
    const dateB = new Date(b.startDate);
    return sortDirection === 'asc' ? dateA - dateB : dateB - dateA;
  });

  // Clear existing events in the grid
  eventsGrid.innerHTML = '';

  // Show/hide no results message
  if (filtered.length === 0) {
    noResults.style.display = 'block';
    eventsGrid.style.display = 'none';
  } else {
    noResults.style.display = 'none';
    eventsGrid.style.display = 'grid';
    
    // Render filtered and sorted events
    filtered.forEach(event => {
      eventsGrid.innerHTML += createEventCardHTML(event);
    });
  }
}
</script>

<!-- Hidden script tag to pass events data to JavaScript -->
<script type="application/json" id="eventsData" set:html={JSON.stringify(events)}></script>

<style>
  /* Main page container */
  .page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  /* Main page title */
  .page-title {
    font-size: 2.5rem; /* Large, prominent title */
    font-weight: 700; /* Bold */
    color: var(--white); /* White text */
    margin-bottom: 1.5rem; /* Space below title */
    line-height: 1.2; /* Tight line height */
  }

  /* Grid layout for events */
  .event-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  /* Filter form styling */
  .event-filter-form {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
    align-items: center;
  }

  .event-filter-form input,
  .event-filter-form select {
    padding: 0.5rem;
    background-color: rgba(var(--bluergb), 0.5);
    color: var(--white);
    border: 1px solid rgba(var(--bluergb), 0.2);
    border-radius: 4px;
    font-size: 0.9rem;
  }

  .event-filter-form input::placeholder {
    color: rgba(var(--whitergb), 0.6);
  }

  .event-filter-form input:focus,
  .event-filter-form select:focus {
    outline: none;
    border-color: var(--orange);
    box-shadow: 0 0 0 2px rgba(var(--orangergb), 0.2);
  }

  /* No results message styling */
  .no-results {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--platinum);
  }

  .no-results p {
    margin: 0.5rem 0;
    font-size: 1.1rem;
  }

  .no-results p:first-child {
    font-size: 1.3rem;
    font-weight: 600;
    color: var(--white);
  }

  /* Copy all the EventCard styles to ensure consistency */
  .event-card {
    display: block;
    background-color: rgba(var(--whitergb), 0.05);
    border: 1px solid rgba(var(--whitergb), 0.1);
    border-radius: 8px;
    overflow: hidden;
    transition: all 0.2s ease;
    height: 100%;
  }
  
  .event-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(var(--blackrgb), 0.2);
    border-color: rgba(var(--orangergb), 0.3);
  }
  
  .card-link {
    display: block;
    text-decoration: none;
    color: inherit;
    height: 100%;
    display: flex;
    flex-direction: column;
  }
  
  .card-image {
    width: 100%;
    height: 200px;
    overflow: hidden;
    flex-shrink: 0;
  }
  
  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    transition: transform 0.2s ease;
  }
  
  .event-card:hover .card-image img {
    transform: scale(1.05);
  }
  
  .card-content {
    padding: 1.5rem;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .card-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--white);
    margin: 0;
    line-height: 1.3;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  .card-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    font-size: 0.85rem;
    color: var(--platinum);
  }
  
  .card-meta span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    white-space: nowrap;
  }
  
  .card-quote {
    font-style: italic;
    font-size: 0.95rem;
    color: var(--platinum);
    margin: 0;
    padding: 0.75rem 1rem;
    border-left: 3px solid var(--orange);
    background-color: rgba(var(--whitergb), 0.03);
    border-radius: 0 4px 4px 0;
  }
  
  .card-summary {
    font-size: 0.95rem;
    line-height: 1.5;
    color: var(--white);
    margin: 0;
    overflow-wrap: break-word;
    hyphens: auto;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .event-filter-form {
      flex-direction: column;
      align-items: stretch;
    }
    
    .event-filter-form input,
    .event-filter-form select {
      width: 100%;
    }
    
    .card-image {
      height: 150px;
    }
    
    .card-content {
      padding: 1rem;
    }
    
    .card-title {
      font-size: 1.1rem;
    }
    
    .card-meta {
      font-size: 0.8rem;
      gap: 0.5rem;
    }
  }
</style>
