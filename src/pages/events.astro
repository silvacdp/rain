---
import Layout from '../layouts/Layout.astro';
import EventCard from '../layouts/EventCard.astro';
import { getEvents } from '../lib/getEvents.ts';

// Get the full URL from Astro
const url = new URL(Astro.request.url);

// Extract each query param (or fallback to default if missing)
const search = url.searchParams.get('search')?.toLowerCase() || '';
const category = url.searchParams.get('category') || '';
const sort = url.searchParams.get('sort') || 'desc';

// Build Airtable filter formula from query params
const filters = [];

if (search) {
  filters.push(`FIND(LOWER("${search}"), LOWER({Title} & {Summary} & {Quote}))`);
}
if (category) {
  filters.push(`{Category} = "${category}"`);
}

// If multiple filters, wrap them in AND()
const formula = filters.length > 1
  ? `AND(${filters.join(', ')})`
  : filters[0] || '';

console.log('Search:', search);
console.log('Category:', category);
console.log('Sort:', sort);
console.log('Airtable filter formula:', formula);

const events = await getEvents({
  sortDirection: sort,
  filters: formula,
});

console.log('Fetched events count:', events.length);
---

<!-- Page layout wrapper -->
<Layout title="All Events">
  <main class="page-container">
    <h2 class="page-title">All Events</h2>

<!-- Filter/Search Form -->
<form method="GET" class="event-filter-form">
  <input 
    type="text" 
    name="search" 
    value={search} 
    placeholder="Search events..." 
    aria-label="Search"
  />

  <select name="category">
    <option value="">All Categories</option>
    <option value="Rain/Flood" selected={category === 'Rain/Flood'}>Rain/Flood</option>
    <option value="Heatwave" selected={category === 'Heatwave'}>Heatwave</option>
    <option value="Wildfire" selected={category === 'Wildfire'}>Wildfire</option>
    <option value="Other" selected={category === 'Other'}>Other</option>
  </select>

  <select name="sort">
    <option value="desc" selected={sort === 'desc'}>Newest First</option>
    <option value="asc" selected={sort === 'asc'}>Oldest First</option>
  </select>

<script>
  // On any input or select change, submit form automatically
  const form = document.querySelector('.event-filter-form');
  form.addEventListener('change', () => form.submit());
</script>
</form>

    <!-- Events Grid -->
    <section class="event-grid">
      {events.map(event => (
        <EventCard event={event} showFullSummary={false} />
      ))}
    </section>
  </main>
</Layout>

<style>
  /* Main page container */
  .page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  /* Page title styling */
  .page-title {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--white);
  }

  /* Grid layout for events */
  .event-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }




  .event-filter-form {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
    align-items: center;
  }

  .event-filter-form input,
.event-filter-form select,
.event-filter-form button {
  padding: 0.5rem;
  background-color: rgba(var(--whitergb), 0.05);
  color: var(--white);
  border: 1px solid rgba(var(--whitergb), 0.2);
  border-radius: 4px;
  transition: border-color 0.2s ease;
}

.event-filter-form select:focus,
.event-filter-form input:focus {
  outline: none;
  border-color: rgba(var(--orangergb), 0.7);
  box-shadow: 0 0 5px rgba(var(--orangergb), 0.5);
}

</style>

