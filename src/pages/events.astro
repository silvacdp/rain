---
import Layout from '../layouts/Layout.astro';
import EventCard from '../layouts/EventCard.astro';
import { getEvents } from '../lib/getEvents.ts';

// Server-side: fetch all events at once
const events = await getEvents({ sortDirection: 'desc' });
---

<Layout title="All Events">
  <main class="page-container">
    <h2 class="page-title">All Events</h2>

    <!-- Filter/Search Form -->
    <form class="event-filter-form" on:input={handleFilter}>
      <input 
        type="text"
        id="search"
        placeholder="Search events..."
        aria-label="Search"
      />
      <select id="category">
        <option value="">All Categories</option>
        <option value="Rain/Flood">Rain/Flood</option>
        <option value="Heatwave">Heatwave</option>
        <option value="Wildfire">Wildfire</option>
        <option value="Other">Other</option>
      </select>
      <select id="sort">
        <option value="desc">Newest First</option>
        <option value="asc">Oldest First</option>
      </select>
    </form>

    <!-- Events Grid -->
    <section id="event-grid" class="event-grid">
      {events.map(event => (
        <EventCard event={event} showFullSummary={false} client:only />
      ))}
    </section>
  </main>
</Layout>

<script type="module">
  // Attach once DOM is ready
  window.addEventListener('DOMContentLoaded', () => {
    const allEvents = JSON.parse({JSON.stringify(events)});
    const grid = document.getElementById('event-grid');
    const searchInput = document.getElementById('search');
    const categorySelect = document.getElementById('category');
    const sortSelect = document.getElementById('sort');

    function filterEvents() {
      const search = searchInput.value.toLowerCase();
      const category = categorySelect.value;
      const sort = sortSelect.value;

      let filtered = [...allEvents];

      if (search) {
        filtered = filtered.filter(e =>
          [e.title, e.summary, e.quote].join(' ').toLowerCase().includes(search)
        );
      }

      if (category) {
        filtered = filtered.filter(e => e.category === category);
      }

      filtered.sort((a, b) => {
        const dateA = new Date(a.startDate);
        const dateB = new Date(b.startDate);
        return sort === 'asc' ? dateA - dateB : dateB - dateA;
      });

      grid.innerHTML = '';
      for (const e of filtered) {
        const card = document.createElement('div');
        card.innerHTML = `
          ${Astro.renderToString(<EventCard event={e} showFullSummary={false} />)}
        `;
        grid.appendChild(card);
      }
    }

    searchInput.addEventListener('input', filterEvents);
    categorySelect.addEventListener('change', filterEvents);
    sortSelect.addEventListener('change', filterEvents);
    filterEvents();
  });
</script>

<style>
  .page-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .page-title {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    text-align: center;
    color: var(--white);
  }

  .event-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }

  .event-filter-form {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
    align-items: center;
  }

  .event-filter-form input,
  .event-filter-form select {
    padding: 0.5rem;
    background-color: var(--black);
    color: var(--white);
    border: 1px solid rgba(var(--whitergb), 0.2);
    border-radius: 4px;
  }

  .event-filter-form select option {
    background-color: var(--black);
    color: var(--white);
  }
</style>
