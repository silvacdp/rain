---
// src/layouts/EventLayout.astro
// This is the layout template for individual event pages
// It receives event data from Airtable and displays it in a structured format

// Import the main Layout component which provides the site header, footer, and global styles
import Layout from './Layout.astro';

// Destructure the event object from Astro.props - this contains all the event data from Airtable
const { event } = Astro.props;

// Function to get the appropriate icon for each event category
// This matches your exact Airtable category values and makes the site more visual
function getCategoryIcon(category: string): string {
  switch (category) {
    case 'Rain/Flood':
      return 'üåßÔ∏è'; // Rain cloud for rain/flood events
    case 'Heatwave':
      return 'üå°Ô∏è'; // Thermometer for extreme heat events
    case 'Wildfire':
      return 'üî•'; // Fire emoji for wildfire events
    case 'Other':
      return '‚ö†Ô∏è'; // Warning triangle for miscellaneous climate events
    default:
      return 'üåç'; // Globe as ultimate fallback
  }
}

// Comprehensive country name to ISO code mapping
// This allows you to write natural country names in tags and get automatic flag detection
const countryNameToCode: { [key: string]: string } = {
  // Major countries you'll likely use most often
  'USA': 'US',
  'United States': 'US',
  'China': 'CN',
  'India': 'IN',
  'Germany': 'DE',
  'France': 'FR',
  'United Kingdom': 'GB',
  'UK': 'GB',
  'Japan': 'JP',
  'Australia': 'AU',
  'Canada': 'CA',
  'Brazil': 'BR',
  'Russia': 'RU',
  'Italy': 'IT',
  'Spain': 'ES',
  'Mexico': 'MX',
  'Argentina': 'AR',
  'South Africa': 'ZA',
  'Indonesia': 'ID',
  'Turkey': 'TR',
  'South Korea': 'KR',
  'Saudi Arabia': 'SA',
  'Netherlands': 'NL',
  'Belgium': 'BE',
  'Switzerland': 'CH',
  'Austria': 'AT',
  'Sweden': 'SE',
  'Norway': 'NO',
  'Denmark': 'DK',
  'Finland': 'FI',
  'Poland': 'PL',
  'Greece': 'GR',
  'Portugal': 'PT',
  'Czech Republic': 'CZ',
  'Hungary': 'HU',
  'Thailand': 'TH',
  'Vietnam': 'VN',
  'Philippines': 'PH',
  'Malaysia': 'MY',
  'Singapore': 'SG',
  'Egypt': 'EG',
  'Israel': 'IL',
  'Iran': 'IR',
  'Iraq': 'IQ',
  'Chile': 'CL',
  'Peru': 'PE',
  'Colombia': 'CO',
  'Venezuela': 'VE',
  'Ukraine': 'UA',
  'Nigeria': 'NG',
  'Kenya': 'KE',
  'Morocco': 'MA',
  'Algeria': 'DZ',
  'New Zealand': 'NZ',
  'Pakistan': 'PK',
  'Bangladesh': 'BD',
  'Sri Lanka': 'LK',
  'Myanmar': 'MM',
  'Cambodia': 'KH',
  'Laos': 'LA',
  'Nepal': 'NP',
  'Afghanistan': 'AF',
  'Kazakhstan': 'KZ',
  'Uzbekistan': 'UZ',
  'Mongolia': 'MN',
  'North Korea': 'KP',
  'Taiwan': 'TW',
  'Hong Kong': 'HK',
  'Macao': 'MO',
  'Cuba': 'CU',
  'Jamaica': 'JM',
  'Dominican Republic': 'DO',
  'Haiti': 'HT',
  'Puerto Rico': 'PR',
  'Costa Rica': 'CR',
  'Panama': 'PA',
  'Guatemala': 'GT',
  'Honduras': 'HN',
  'Nicaragua': 'NI',
  'El Salvador': 'SV',
  'Belize': 'BZ',
  'Ecuador': 'EC',
  'Bolivia': 'BO',
  'Paraguay': 'PY',
  'Uruguay': 'UY',
  'Guyana': 'GY',
  'Suriname': 'SR',
  'French Guiana': 'GF',
  'Iceland': 'IS',
  'Ireland': 'IE',
  'Luxembourg': 'LU',
  'Malta': 'MT',
  'Cyprus': 'CY',
  'Estonia': 'EE',
  'Latvia': 'LV',
  'Lithuania': 'LT',
  'Slovenia': 'SI',
  'Slovakia': 'SK',
  'Croatia': 'HR',
  'Bosnia and Herzegovina': 'BA',
  'Serbia': 'RS',
  'Montenegro': 'ME',
  'North Macedonia': 'MK',
  'Albania': 'AL',
  'Bulgaria': 'BG',
  'Romania': 'RO',
  'Moldova': 'MD',
  'Belarus': 'BY',
  'Georgia': 'GE',
  'Armenia': 'AM',
  'Azerbaijan': 'AZ',
  // Add more countries as needed - this covers most major ones
};

// Function to convert country code to flag emoji
// Uses Unicode regional indicator symbols to create flag emojis
function countryCodeToFlag(countryCode: string): string {
  // Handle special case for Europe - use EU flag even though it's not a country
  if (countryCode === 'EU') return 'üá™üá∫';
  
  // Convert country code to flag emoji using regional indicator symbols
  // This works by adding 127397 to each character code to get the regional indicator
  return countryCode.toUpperCase().split('').map(char => 
    String.fromCodePoint(char.charCodeAt(0) + 127397)
  ).join('');
}

// Function to extract country flag from tags
// Looks through all tags to find country names and returns the appropriate flag
function getFlagFromTags(tags: string): string {
  if (!tags) return 'üåç'; // Default to globe if no tags
  
  // Split tags by common separators (comma, semicolon, pipe)
  const tagList = tags.split(/[,;|]/).map(tag => tag.trim());
  
  // Check for special regional tags first
  for (const tag of tagList) {
    if (tag.toLowerCase() === 'europe') {
      return 'üá™üá∫'; // EU flag for Europe
    }
  }
  
  // Look for country names in tags
  for (const tag of tagList) {
    // Check if this tag matches any country name (case-insensitive)
    const countryCode = countryNameToCode[tag] || countryNameToCode[tag.toLowerCase()];
    if (countryCode) {
      return countryCodeToFlag(countryCode);
    }
  }
  
  // Default to globe if no country found in tags
  return 'üåç';
}

// Function to format date ranges in a human-readable way
// Converts "2025-07-07" to "July 7, 2025" or "July 7-10, 2025" for ranges
function formatDateRange(startDate: string, endDate?: string): string {
  if (!startDate) return '';
  
  const start = new Date(startDate);
  const startOptions: Intl.DateTimeFormatOptions = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric' 
  };
  
  // If no end date, just return the start date
  if (!endDate) {
    return start.toLocaleDateString('en-US', startOptions);
  }
  
  const end = new Date(endDate);
  
  // If same month and year, show "July 7-10, 2025"
  if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
    return `${start.toLocaleDateString('en-US', { month: 'long' })} ${start.getDate()}-${end.getDate()}, ${start.getFullYear()}`;
  }
  
  // If different months, show "July 7 - August 3, 2025"
  if (start.getFullYear() === end.getFullYear()) {
    return `${start.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })} - ${end.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}, ${start.getFullYear()}`;
  }
  
  // If different years, show full dates
  return `${start.toLocaleDateString('en-US', startOptions)} - ${end.toLocaleDateString('en-US', startOptions)}`;
}

// Process the formatted date for display
const formattedDate = formatDateRange(event.startDate, event.endDate);

// Get the flag from tags for this event
const locationFlag = getFlagFromTags(event.tags);
---

<!-- Use the main Layout component and pass the event title as the page title -->
<Layout title={event.title}>
  <!-- Main article container for the event content -->
  <article class="event-container">
    
    <!-- Header section with event title and metadata -->
    <header class="event-header">
      <!-- Main event title - this comes from your Airtable 'title' field -->
      <h1 class="event-title">{event.title}</h1>
      
      <!-- Meta information section - only shows if the data exists in Airtable -->
      <div class="event-meta">
        {/* Display formatted date range if available */}
        {formattedDate && <span class="event-date">üìÖ {formattedDate}</span>}
        
        {/* Display location with flag from tags */}
        {event.location && (
          <span class="event-location">
            {/* Show flag based on country tags, or globe if no country detected */}
            {locationFlag} {event.location}
          </span>
        )}
        
        {/* Display category with appropriate icon */}
        {event.category && (
          <span class="event-category">
            {getCategoryIcon(event.category)} {event.category}
          </span>
        )}
      </div>
    </header>

    <!-- Image section - only displays if an image URL exists in Airtable -->
    {event.imageUrl && (
      <div class="event-image">
        <!-- Main event image with alt text for accessibility -->
        <img src={event.imageUrl} alt={event.title} />
        {/* Optional image source attribution - only shows if imageSource field has data */}
        {event.imageSource && <p class="image-source">Source: {event.imageSource}</p>}
      </div>
    )}

    <!-- Quote section - displays an impactful quote from news coverage if available -->
    {event.quote && (
      <blockquote class="event-quote">
        "{event.quote}"
      </blockquote>
    )}

    <!-- Main content section with event summary -->
    <div class="event-content">
      {/* Event summary paragraph - the main description of what happened */}
      {event.summary && <p class="event-summary">{event.summary}</p>}
    </div>

    <!-- Footer section with additional details and source links -->
    <!-- Only shows if at least one of these fields has data -->
    {(event.links || event.tags) && (
      <footer class="event-footer">
        {/* Tags - keywords/categories for the event */}
        {event.tags && <p><strong>Tags:</strong> {event.tags}</p>}
        
        {/* Source links - automatically handles any number of sources */}
        {event.links && (
          <div class="event-links">
            <strong>Sources:</strong>
            <div class="links-list">
              {/* Split the links string by commas and create numbered source links */}
              {/* This automatically handles 1, 2, 3, 4, 5+ sources based on your Airtable data */}
              {event.links.split(',').map((link: string, index: number) => (
                <a href={link.trim()} target="_blank" rel="noopener noreferrer">
                  Source {index + 1} ‚Üí
                </a>
              ))}
            </div>
          </div>
        )}
      </footer>
    )}
  </article>
</Layout>

<style>
  /* Main container for the entire event page */
  .event-container {
    max-width: 800px; /* Matches your Layout.astro container width */
    margin: 0 auto; /* Centers the container horizontally */
    padding: 0 1rem 2rem; /* Top: 0, sides: 1rem, bottom: 2rem */
    color: var(--white); /* Uses your white color variable from Layout.astro */
  }

  /* Header section styling */
  .event-header {
    margin-bottom: 2rem; /* Space below the header before the next section */
  }

  /* Main event title styling */
  .event-title {
    font-size: 2.2rem; /* Large, prominent title */
    margin-bottom: 1rem; /* Space below title */
    color: var(--white); /* White text using your color variable */
    line-height: 1.2; /* Tighter line height for better readability */
    font-weight: 700; /* Bold font weight */
  }

  /* Container for the metadata (date, location, category) */
  .event-meta {
    display: flex; /* Horizontal layout */
    gap: 1.5rem; /* Space between each meta item */
    flex-wrap: wrap; /* Allows wrapping on smaller screens */
    font-size: 0.9rem; /* Slightly smaller than body text */
    color: var(--platinum); /* Light gray color for less prominence */
    margin-bottom: 1rem; /* Space below meta section */
  }

  /* Individual meta items (date, location, category) */
  .event-meta span {
    display: flex; /* Allows emoji and text to align properly */
    align-items: center; /* Vertically centers emoji with text */
    gap: 0.3rem; /* Small space between emoji and text */
  }

  /* Image section container */
  .event-image {
    margin: 2rem 0; /* Vertical margin above and below */
  }

  /* The actual event image */
  .event-image img {
    width: 100%; /* Full width of container */
    height: auto; /* Maintains aspect ratio */
    border-radius: 8px; /* Rounded corners */
    box-shadow: 0 4px 12px rgba(var(--blackrgb), 0.3); /* Subtle shadow using your black color */
  }

  /* Image source attribution text */
  .image-source {
    font-size: 0.8rem; /* Smaller text for attribution */
    color: var(--platinum); /* Light gray color */
    margin-top: 0.5rem; /* Small space above attribution */
    font-style: italic; /* Italic text to differentiate from main content */
  }

  /* Quote styling - this gets special treatment as an important element */
  .event-quote {
    font-style: italic; /* Italic text for quotes */
    font-size: 1.2rem; /* Slightly larger than body text */
    margin: 2rem 0; /* Generous vertical spacing */
    padding: 1.5rem; /* Internal padding for breathing room */
    border-left: 4px solid var(--orange); /* Orange left border using your brand color */
    background-color: rgba(var(--whitergb), 0.05); /* Very subtle white background */
    border-radius: 0 4px 4px 0; /* Rounded corners except top-left */
    color: var(--white); /* White text */
  }

  /* Main event summary text */
  .event-summary {
    font-size: 1.1rem; /* Slightly larger than default for readability */
    line-height: 1.7; /* Generous line height for easy reading */
    margin-bottom: 2rem; /* Space below summary */
    color: var(--white); /* White text */
  }

  /* Footer section with additional details */
  .event-footer {
    margin-top: 2rem; /* Space above footer */
    padding-top: 2rem; /* Internal padding at top */
    border-top: 1px solid rgba(var(--whitergb), 0.3); /* Subtle border separation */
    color: var(--platinum); /* Light gray for less prominent info */
    font-size: 0.9rem; /* Slightly smaller text */
  }

  /* Paragraphs in the footer */
  .event-footer p {
    margin-bottom: 0.8rem; /* Space between footer items */
  }

  /* Bold labels in the footer (like "Tags:") */
  .event-footer strong {
    color: var(--white); /* White color for labels to make them stand out */
  }

  /* Container for the links section */
  .event-links {
    margin-bottom: 0.8rem; /* Space below links section */
  }

  /* Container for individual source links */
  .links-list {
    display: flex; /* Vertical layout */
    flex-direction: column; /* Stack links vertically */
    gap: 0.5rem; /* Space between each link */
    margin-top: 0.5rem; /* Space above the links */
  }

  /* Individual source link styling */
  .links-list a {
    color: var(--orange); /* Orange color using your brand color */
    text-decoration: none; /* No underline */
    font-weight: 500; /* Medium font weight */
    transition: opacity 0.2s ease; /* Smooth hover effect */
  }

  /* Hover effect for source links */
  .links-list a:hover {
    opacity: 0.8; /* Slightly faded on hover */
  }

  /* Mobile responsiveness - styles that apply on smaller screens */
  @media (max-width: 768px) {
    /* Adjust container padding for mobile */
    .event-container {
      padding: 0 1rem 1rem; /* Less bottom padding on mobile */
    }
    
    /* Smaller title on mobile */
    .event-title {
      font-size: 1.8rem; /* Reduced from 2.2rem */
    }

    /* Stack meta items vertically on mobile */
    .event-meta {
      gap: 1rem; /* Smaller gap between items */
      flex-direction: column; /* Stack vertically instead of horizontally */
    }

    /* Adjust quote sizing for mobile */
    .event-quote {
      padding: 1rem; /* Less padding on mobile */
      font-size: 1.1rem; /* Slightly smaller font */
    }
  }
</style>
